name: CI

on:
  push:
    branches: 
      - main
    paths-ignore:
      - 'docker-compose/*'
      - 'website/**'
      - 'infra-as-code/**'
      - '*.md'
      - 'Pulumi.yaml'
      - 'bionic.sh'
      - '.github/workflows/integration-testing.yml'
      - '.github/workflows/embeddings-docker.yml'
      - 'crates/k8s-operator/config/*'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docker-compose/*'
      - 'website/**'
      - 'infra-as-code/**'
      - '*.md'
      - 'Pulumi.yaml'
      - 'bionic.sh'
      - '.github/workflows/integration-testing.yml'
      - '.github/workflows/embeddings-docker.yml'
      - 'crates/k8s-operator/config/*'

jobs:

  security_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: security_audit
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - uses: actions/checkout@v4
    - name: Put back the git branch into git (Earthly uses it for tagging)
      run: |
        branch=""
        if [ -n "$GITHUB_HEAD_REF" ]; then
          branch="$GITHUB_HEAD_REF"
        else
          branch="${GITHUB_REF##*/}"
        fi
        git checkout -b "$branch" || true

    - name: Download latest earthly
      run: "sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'"

    - name: Earthly version
      run: earthly --version 
         
    - name: Log in to the Github Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run build
      if: github.ref != 'refs/heads/main'
      run: earthly --allow-privileged --output --ci +pull-request
      
    - name: Run build and Deploy Containers
      if: github.ref == 'refs/heads/main'
      run: earthly --allow-privileged --output --ci +all
        
    - name: Semantic Release
      run: | 
        npm i -D @semantic-release/exec
        npm i -D @semantic-release-plus/docker
        npm i -D @semantic-release/git
        npx semantic-release

  # We have ro wait for the commit that semantic release makes
  # Or the next tasks all get the wrong release version.
  wait-for-release:
    needs: build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - name: Wait...
      run: sleep 60s  
  
  build-cli-linux:
    needs: wait-for-release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - uses: actions/checkout@v4

    - name: Download latest earthly
      run: "sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'"

    - name: Get latest release info
      id: get_latest_release
      run: |
        latest_release=$(curl  "https://api.github.com/repos/bionic-gpt/bionic-gpt/tags" | jq -r '.[0].name')
        echo "::set-output name=latest_release::$latest_release"

    - name: Set versions
      run: |
        cd .github/workflows/ && ./update-version.sh ${{ steps.get_latest_release.outputs.latest_release }}
        cd ../..
        cat crates/k8s-operator/Cargo.toml

    - name: Run build
      run: earthly --allow-privileged --output --ci +build-cli-linux

    - name: Upload executable to release
      if: github.ref == 'refs/heads/main'
      run: |
        gh release upload ${{ steps.get_latest_release.outputs.latest_release }} ./bionic-cli-linux --clobber

  build-osx-cli:
    needs: wait-for-release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - uses: actions/checkout@v4

    - name: Download latest earthly
      run: "sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'"

    - name: Get latest release info
      id: get_latest_release
      run: |
        latest_release=$(curl  "https://api.github.com/repos/bionic-gpt/bionic-gpt/tags" | jq -r '.[0].name')
        echo "::set-output name=latest_release::$latest_release"

    - name: Set versions
      run: |
        cd .github/workflows/ && ./update-version.sh ${{ steps.get_latest_release.outputs.latest_release }}
        cd ../..
        cat crates/k8s-operator/Cargo.toml

    - name: Run build
      run: earthly --allow-privileged --output --ci +build-cli-osx


    - name: Upload executable to release
      if: github.ref == 'refs/heads/main'
      run: |
        gh release upload ${{ steps.get_latest_release.outputs.latest_release }} ./bionic-cli-darwin --clobber

  build-windows-cli:
    needs: wait-for-release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - uses: actions/checkout@v4

    - name: Download latest earthly
      run: "sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'"

    - name: Get latest release info
      id: get_latest_release
      run: |
        latest_release=$(curl  "https://api.github.com/repos/bionic-gpt/bionic-gpt/tags" | jq -r '.[0].name')
        echo "::set-output name=latest_release::$latest_release"
        
    - name: Set versions
      run: |
        cd .github/workflows/ && ./update-version.sh ${{ steps.get_latest_release.outputs.latest_release }}
        cd ../..
        cat crates/k8s-operator/Cargo.toml

    - name: Run build
      run: earthly --allow-privileged --output --ci +build-cli-windows

    - name: Upload executable to release
      if: github.ref == 'refs/heads/main'
      run: |
        gh release upload ${{ steps.get_latest_release.outputs.latest_release }} ./bionic-cli-windows.exe --clobber

  integration-testing:
    needs: [build-windows-cli, build-osx-cli, build-cli-linux]
    runs-on: ubuntu-latest
    services:
      # docker run -p 4444:4444 -p 7900:7900 --shm-size="2g" selenium/standalone-chrome:latest
      selenium:
        # Docker Hub image
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
          - 7900:7900
        options: --shm-size="2g"
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - uses: actions/checkout@v4

    - name: Get latest release info
      id: get_latest_release
      run: |
        latest_release=$(curl  "https://api.github.com/repos/bionic-gpt/bionic-gpt/tags" | jq -r '.[0].name')
        echo "::set-output name=latest_release::$latest_release"

    - name: Install K3s
      run: |
        sudo curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='server --write-kubeconfig-mode="644"' sh -
        mkdir -p ~/.kube
        cp /etc/rancher/k3s/k3s.yaml ~/.kube/config && sed -i "s,127.0.0.1,$(hostname -I | awk '{print $1}'),g" ~/.kube/config

    - name: Install Bionic CLI
      run: |
        export BIONIC_VERSION=${{ steps.get_latest_release.outputs.latest_release }}
        curl -OL https://github.com/bionic-gpt/bionic-gpt/releases/download/${BIONIC_VERSION}/bionic-cli-linux
        chmod +x ./bionic-cli-linux
        sudo mv ./bionic-cli-linux /usr/local/bin/bionic
        bionic -V

    - name: Install Bionic Application into K3s
      run: |
        export HOST_IP_ADDRESS=$(hostname -I | awk '{print $1}')
        bionic install --testing --hostname-url http://$HOST_IP_ADDRESS

    - name: Install Cornucopis
      run: |
        curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        cargo binstall --version 0.9.0 cornucopia -y

    - name: Wait for All the Pods
      run: |
        sleep 40
        kubectl get pods -n bionic-gpt
        kubectl wait  --timeout=120s --for=condition=ready -n bionic-gpt pod/bionic-db-cluster-1
        kubectl wait  --timeout=120s --for=condition=ready -n bionic-gpt pod/keycloak-db-cluster-1
        kubectl wait  --timeout=120s --for=condition=ready pod -l app=bionic-gpt -n bionic-gpt
        kubectl wait  --timeout=120s --for=condition=ready pod -l app=keycloak -n bionic-gpt
        kubectl wait  --timeout=120s --for=condition=ready pod -l app=oauth2-proxy -n bionic-gpt
        kubectl wait  --timeout=120s --for=condition=ready pod -l app=pipeline-job -n bionic-gpt
        kubectl get pods -n bionic-gpt

    - name: Curl the cluster
      run: |
        export HOST_IP_ADDRESS=$(hostname -I | awk '{print $1}')
        curl $HOST_IP_ADDRESS:80

    - name: Run the integrations tests
      run: |
        kubectl -n bionic-gpt port-forward --address 0.0.0.0 pod/bionic-db-cluster-1 5432 &
        kubectl -n bionic-gpt port-forward --address 0.0.0.0 deployment/mailhog 8025 &

        export DATABASE_URL=$(kubectl get secret database-urls -n bionic-gpt -o jsonpath="{.data.migrations-url}" | base64 --decode | sed "s/bionic-db-cluster-rw/localhost/; s/\?sslmode=require//")
        export APP_DATABASE_URL=$DATABASE_URL
        echo $DATABASE_URL

        export HOST_IP_ADDRESS=$(hostname -I | awk '{print $1}')
        export WEB_DRIVER_URL=http://localhost:4444
        cd crates/integration-testing
        cargo test -- --nocapture


