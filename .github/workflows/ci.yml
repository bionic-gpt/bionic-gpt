name: CI

on:
  push:
    branches: 
      - main
    paths-ignore:
      - 'docker-compose/*'
      - 'website/**'
      - 'infra-as-code/**'
      - '*.md'
      - 'Pulumi.yaml'
      - '.github/workflows/integration-testing.yml'
      - '.github/workflows/embeddings-docker.yml'
      - 'crates/k8s-operator/config/*'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docker-compose/*'
      - 'website/**'
      - 'infra-as-code/**'
      - '*.md'
      - 'Pulumi.yaml'
      - '.github/workflows/integration-testing.yml'
      - '.github/workflows/embeddings-docker.yml'
      - 'crates/k8s-operator/config/*'

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FORCE_COLOR: 1
    steps:
    - uses: actions/checkout@v4
    - name: Put back the git branch into git (Earthly uses it for tagging)
      run: |
        branch=""
        if [ -n "$GITHUB_HEAD_REF" ]; then
          branch="$GITHUB_HEAD_REF"
        else
          branch="${GITHUB_REF##*/}"
        fi
        git checkout -b "$branch" || true

    - name: Download latest earthly
      run: "sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'"

    - name: Earthly version
      run: earthly --version 
         
    - name: Log in to the Github Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run build
      if: github.ref != 'refs/heads/main'
      run: earthly --allow-privileged --output --ci +pull-request
      
    - name: Run build and Deploy Containers
      if: github.ref == 'refs/heads/main'
      run: earthly --allow-privileged --output --ci +all
        
    - name: Semantic Release
      run: | 
        npm i -D @semantic-release/exec
        npm i -D @semantic-release-plus/docker
        npm i -D @semantic-release/git
        npx semantic-release


  integration-tests:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Copy files from the dataset folder on the testing image
        run: |
          mkdir -p ./.devcontainer/datasets
          mkdir -p ./.devcontainer/mocks
          mkdir -p ./tmp
          docker pull ghcr.io/bionic-gpt/bionicgpt-integration-tests:latest
          docker create --name dummy ghcr.io/bionic-gpt/bionicgpt-integration-tests
          sudo docker cp dummy:/datasets/parliamentary-dialog.txt ./.devcontainer/datasets
          sudo docker cp dummy:/mocks/embeddings.mock.yaml ./.devcontainer/mocks
          sudo docker cp dummy:/mocks/openai.mock.yaml ./.devcontainer/mocks
          sudo docker cp dummy:/mocks/unstructured.mock.yaml ./.devcontainer/mocks
          sudo chmod 777 ./.devcontainer/datasets/*
          sudo chmod 777 ./.devcontainer/mocks/*
          ls -la ./.devcontainer/datasets
          ls -la ./.devcontainer/mocks

      - name: Start Docker Compose
        run: |
          docker-compose -f docker-compose/docker-compose.yml -f docker-compose/docker-compose-integration.yml up -d 

      - name: Run Integration Tests
        run: |
          docker run --rm --entrypoint "./multi_user_test" \
            --network=docker-compose_default \
            -e WEB_DRIVER_DESTINATION_HOST=http://oauth2-proxy:7800 \
            -e DATABASE_URL=postgresql://bionic_application:testpassword@postgres:5432/bionic-gpt \
            ghcr.io/bionic-gpt/bionicgpt-integration-tests:latest

          docker run --rm --entrypoint "./single_user_test" \
            --network=docker-compose_default \
            -e WEB_DRIVER_DESTINATION_HOST=http://oauth2-proxy:7800 \
            -e DATABASE_URL=postgresql://bionic_application:testpassword@postgres:5432/bionic-gpt \
            ghcr.io/bionic-gpt/bionicgpt-integration-tests:latest

      - name: Stop Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose/docker-compose.yml -f docker-compose/docker-compose-integration.yml down


      - name: Where's the video?
        if: always()
        run: |
          ls -la ./tmp

      - name: Upload the video of our selenium session
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: integration-testing-screen-recording
          path: ./tmp