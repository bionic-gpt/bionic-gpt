services:

  llm-api:
    image: ghcr.io/bionic-gpt/llama-2-7b-chat:1.0.5

  embeddings-api:
    image: ghcr.io/bionic-gpt/bionicgpt-embeddings-api:cpu-0.6

  unstructured:
    image: downloads.unstructured.io/unstructured-io/unstructured-api:4ffd8bc

  # Handles routing between our containers
  envoy:
    build: 
      context: ./envoy
    ports:
      - "7701:7701"
      - "7702:7702"

  postgres:
    image: ankane/pgvector
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # We use Oauth2 Proxy as the interface to our OIDC provider
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
    environment:
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:7700
      OAUTH2_PROXY_COOKIE_SECRET: OQINaROshtE9TcZkNAm-5Zs2Pv3xaWytBmc5W7sPX7w=
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_COOKIE_SECURE: "false"
      OAUTH2_PROXY_UPSTREAMS: http://envoy:7701
      OAUTH2_PROXY_UPSTREAM_TIMEOUT: 600s
      OAUTH2_PROXY_CLIENT_SECRET: 69b26b08-12fe-48a2-85f0-6ab223f45777
      OAUTH2_PROXY_CLIENT_ID: bionic-gpt
      OAUTH2_PROXY_REDIRECT_URL: http://localhost:7700/oauth2/callback
      OAUTH2_PROXY_OIDC_ISSUER_URL: http://keycloak:7710/realms/bionic-gpt
      OAUTH2_PROXY_INSECURE_OIDC_SKIP_ISSUER_VERIFICATION: "true"
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: Keycloak
      OAUTH2_PROXY_AUTH_LOGGING: "true"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_WHITELIST_DOMAINS: "localhost:7710"
      OAUTH2_PROXY_SKIP_AUTH_ROUTES:  "^/v1*"
    restart: unless-stopped
    ports:
      - 7700:7700
    depends_on:
      keycloak:
        condition: service_healthy

  oauth2-proxy-selenium:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
    environment:
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:7711
      OAUTH2_PROXY_COOKIE_SECRET: OQINaROshtE9TcZkNAm-5Zs2Pv3xaWytBmc5W7sPX7w=
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_COOKIE_SECURE: "false"
      OAUTH2_PROXY_UPSTREAMS: http://envoy:7701
      OAUTH2_PROXY_CLIENT_SECRET: 69b26b08-12fe-48a2-85f0-6ab223f45777
      OAUTH2_PROXY_CLIENT_ID: bionic-gpt
      OAUTH2_PROXY_REDIRECT_URL: http://oauth2-proxy-selenium:7711/oauth2/callback
      OAUTH2_PROXY_OIDC_ISSUER_URL: http://keycloak-selenium:7712/realms/bionic-gpt
      OAUTH2_PROXY_INSECURE_OIDC_SKIP_ISSUER_VERIFICATION: "true"
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: Keycloak
      OAUTH2_PROXY_AUTH_LOGGING: "true"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_WHITELIST_DOMAINS: "keycloak-selenium:7712"
      OAUTH2_PROXY_SKIP_AUTH_ROUTES:  "^/v1*"
    restart: unless-stopped
    ports:
      - 7711:7711
    depends_on:
      keycloak-selenium:
        condition: service_healthy

  # You can use any OIDC provider with Oauth2 but Keycloak is easy to configure.
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    volumes:
     - ./keycloak:/opt/keycloak/data/import
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: Pa55w0rd
      KC_HEALTH_ENABLED: "true"
    command:
      - "start-dev"
      - "--import-realm"
      - "--http-port=7710"
      - "--proxy=edge"
      - "--hostname=localhost:7710"
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/7710;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 10s
      timeout: 5s
    ports:
      - 7710:7710

  # You can use any OIDC provider with Oauth2 but Keycloak is easy to configure.
  keycloak-selenium:
    image: quay.io/keycloak/keycloak:23.0
    volumes:
     - ./keycloak:/opt/keycloak/data/import
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: Pa55w0rd
      KC_HEALTH_ENABLED: "true"
    command:
      - "start-dev"
      - "--import-realm"
      - "--http-port=7712"
      - "--proxy=edge"
      - "--hostname=keycloak-selenium:7712"
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/7712;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 10s
      timeout: 5s
    ports:
      - 7712:7712

  development:
    build: 
      context: .
      dockerfile: Dockerfile  
    
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    volumes:
      - ..:/workspace:cached
      # Give access to ssh keys on the host (Is there a better way to do this?)
      - ~/.ssh:/home/host-ssh:cached
      # We need this so docker in docker works
      - /var/run/docker.sock:/var/run/docker.sock
      - target:/workspace/target # Set target as a volume for performance. 
      # Uncomment the next line to improve performance when using node.
      #- node_modules:/vscode/node_modules 

    environment:
      LOGOUT_URL: http://keycloak-selenium:7712/realms/bionic-gpt/protocol/openid-connect/logout
      DATABASE_URL: postgresql://postgres:testpassword@postgres:5432/bionicgpt?sslmode=disable
      APP_DATABASE_URL: postgresql://bionic_application:testpassword@postgres:5432/bionicgpt?sslmode=disable

      INVITE_DOMAIN: http://oauth2-proxy-selenium:7711
      INVITE_FROM_EMAIL_ADDRESS: support@application.com
      SMTP_HOST: smtp
      SMTP_PORT: 1025
      SMTP_USERNAME: thisisnotused
      SMTP_PASSWORD: thisisnotused
      SMTP_TLS_OFF: 'true'

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    working_dir: /workspace
    depends_on:
      postgres:
        condition: service_healthy

  # Integration testing using a headless chrome browser
  selenium:
    image: selenium/standalone-chrome:4
    shm_size: 2gb
    environment:
      VNC_NO_PASSWORD: 1
    ports:
      # VNC
      - 7705:5900
      # No VNC
      - 7706:7900
    volumes:
      # So that we can load examples with the browser testing.
      # However it doesn't seem to work with earthly, you have to docker cp the files
      - ./datasets:/workspace

  # MailHog is an email testing tool for developers.
  smtp:
    image: mailhog/mailhog

volumes:
  target:
  node_modules:
  ollama:
