apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
data:
  grafana.ini: |
    [server]
    domain = $HOSTNAME_DOMAIN
    root_url = $HOSTNAME_URL/observability/
    serve_from_sub_path = true

    [security]
    admin_user = admin
    admin_password = $ADMIN_PASSWORD

    [auth.generic_oauth]
    auto_login = true
    enabled = true
    name = Keycloak
    allow_sign_up = true
    client_id = grafana
    client_secret = 3dd84ee3-8c4a-44d6-a617-8f5a8561e585
    scopes = openid email profile roles
    auth_url = $HOSTNAME_URL/oidc/realms/observability/protocol/openid-connect/auth
    token_url = $HOSTNAME_URL/oidc/realms/observability/protocol/openid-connect/token
    api_url = $HOSTNAME_URL/oidc/realms/observability/protocol/openid-connect/userinfo
    role_attribute_path = contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Bionic Database
        type: postgres
        access: proxy
        url: bionic-db-cluster-rw:5432
        user: bionic_readonly
        database: bionic-gpt
        secureJsonData:
          password: $BIONIC_PASSWORD
        jsonData:
          sslmode: disable  
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'Default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /etc/grafana/provisioning/dashboards
---

apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-secret
type: Opaque
data:
  admin-user: YWRtaW4=   # base64 for 'admin'
  admin-password: YWRtaW4= # base64 for 'admin'

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config-volume
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources-volume
          mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          subPath: datasources.yaml
        - name: grafana-dashboards-volume
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: dashboards.yaml
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards/bionic-dashboard.json
          subPath: bionic-dashboard.json
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin-secret
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-secret
              key: admin-password
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-config-volume
        configMap:
          name: grafana-config
      - name: grafana-datasources-volume
        configMap:
          name: grafana-config
      - name: grafana-dashboards-volume
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  ports:
  - port: 3000
    name: grafana-port
    targetPort: 3000
  selector:
    app: grafana

---

apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-secret
type: Opaque
data:
  admin-user: YWRtaW4=   # base64 for 'admin'
  admin-password: YWRtaW4= # base64 for 'admin'
  pg-password: cGFzc3dvcmQ= # base64 for your PostgreSQL password